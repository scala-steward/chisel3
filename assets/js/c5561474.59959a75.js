"use strict";(globalThis.webpackChunkchisel_lang=globalThis.webpackChunkchisel_lang||[]).push([[340],{8453:(e,n,l)=>{l.d(n,{R:()=>s,x:()=>i});var o=l(6540);const t={},c=o.createContext(t);function s(e){const n=o.useContext(c);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),o.createElement(c.Provider,{value:n},e.children)}},8877:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"explanations/multi-clock","title":"Multiple Clock Domains","description":"Chisel 3 supports multiple clock domains as follows.","source":"@site/docs/explanations/multi-clock.md","sourceDirName":"explanations","slug":"/explanations/multi-clock","permalink":"/docs/explanations/multi-clock","draft":false,"unlisted":false,"editUrl":"https://github.com/chipsalliance/chisel/tree/main/docs/src/explanations/multi-clock.md","tags":[],"version":"current","frontMatter":{"layout":"docs","title":"Multiple Clock Domains","section":"chisel3"},"sidebar":"chiselSidebar","previous":{"title":"Motivation","permalink":"/docs/explanations/motivation"},"next":{"title":"Muxes and Input Selection","permalink":"/docs/explanations/muxes-and-input-selection"}}');var t=l(4848),c=l(8453);const s={layout:"docs",title:"Multiple Clock Domains",section:"chisel3"},i="Multiple Clock Domains",a={},u=[];function r(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"multiple-clock-domains",children:"Multiple Clock Domains"})}),"\n",(0,t.jsx)(n.p,{children:"Chisel 3 supports multiple clock domains as follows."}),"\n",(0,t.jsxs)(n.p,{children:["Note that in order to cross clock domains safely, you will need appropriate synchronization logic (such as an asynchronous FIFO). You can use the ",(0,t.jsx)(n.a,{href:"https://github.com/ucb-bar/asyncqueue",children:"AsyncQueue library"})," to do this easily."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"import chisel3._\n\nclass MultiClockModule extends Module {\n  val io = IO(new Bundle {\n    val clockB = Input(Clock())\n    val resetB = Input(Bool())\n    val stuff = Input(Bool())\n  })\n\n  // This register is clocked against the module clock.\n  val regClock = RegNext(io.stuff)\n\n  withClockAndReset (io.clockB, io.resetB) {\n    // In this withClock scope, all synchronous elements are clocked against io.clockB.\n    // Reset for flops in this domain is using the explicitly provided reset io.resetB.\n\n    // This register is clocked against io.clockB.\n    val regClockB = RegNext(io.stuff)\n  }\n\n  // This register is also clocked against the module clock.\n  val regClock2 = RegNext(io.stuff)\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can also instantiate modules in another clock domain:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"import chisel3._\n\nclass ChildModule extends Module {\n  val io = IO(new Bundle{\n    val in = Input(Bool())\n  })\n}\nclass MultiClockModule extends Module {\n  val io = IO(new Bundle {\n    val clockB = Input(Clock())\n    val resetB = Input(Bool())\n    val stuff = Input(Bool())\n  })\n  val clockB_child = withClockAndReset(io.clockB, io.resetB) { Module(new ChildModule) }\n  clockB_child.io.in := io.stuff\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you only want to connect your clock to a new clock domain and use the regular implicit reset signal, you can use ",(0,t.jsx)(n.code,{children:"withClock(clock)"})," instead of ",(0,t.jsx)(n.code,{children:"withClockAndReset"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-scala",children:"import chisel3._\n\nclass MultiClockModule extends Module {\n  val io = IO(new Bundle {\n    val clockB = Input(Clock())\n    val stuff = Input(Bool())\n  })\n\n  // This register is clocked against the module clock.\n  val regClock = RegNext(io.stuff)\n\n  withClock (io.clockB) {\n    // In this withClock scope, all synchronous elements are clocked against io.clockB.\n\n    // This register is clocked against io.clockB, but uses implict reset from the parent context.\n    val regClockB = RegNext(io.stuff)\n  }\n\n  // This register is also clocked against the module clock.\n  val regClock2 = RegNext(io.stuff)\n}\n\n// Instantiate module in another clock domain with implicit reset.\nclass MultiClockModule2 extends Module {\n  val io = IO(new Bundle {\n    val clockB = Input(Clock())\n    val stuff = Input(Bool())\n  })\n  val clockB_child = withClock(io.clockB) { Module(new ChildModule) }\n  clockB_child.io.in := io.stuff\n}\n\nclass ChildModule extends Module {\n  val io = IO(new Bundle{\n    val in = Input(Bool())\n  })\n}\n\n"})})]})}function d(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}}}]);